import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image';
import { useEffect, useState } from 'react';
import React from 'react'
import styled from 'styled-components';

const AppContainer = styled.div`
`;

const FormComponent = styled.div`
  background-color: #fff;
  padding: 16px;
  border-bottom: 1px solid #DADFE3;
  // position: fixed;
  // z-index: 1000;
  width: 100%;
  form {
    display: flex;
    flex-direction: row;
    border-radius: 4px;
    border: solid 1px #d5d8da;
    background-color: #fff;
    input {
      padding: 6px 13px;
      border: none;
      width: 100%;
      height: 40px;
    }
    .search-button {
      padding-right: 16px;
      padding-top: 5px;
      width: 10%;
    }
    button {
      border: none;
      background-color: #fff;
    }
    button span {
      display: none;
    }
    input:focus {
    outline: 0;
    box-shadow: 0px 0px 5px rgb(2 184 117 / 60%);
    }
  }
  button .mobile-icon-search::before {
  content: "\f2a4";
  display: inline-block;
  font-family: "glyphs";
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  line-height: 1;
  text-decoration: inherit;
  text-rendering: optimizeLegibility;
  text-transform: none;
  height: 20px;
  width: 20px;
  background-image: url('/search-icon.svg');
  background-size: 24px;
  background-repeat: no-repeat;
  }
`;

const ARTIST_TOKEN = 'BQBxVkoFGCJe4X0zY6rp_9jzMQP5KM0XUb7AX_iPQcT37UavKz1qTI_-NJWLijoQ2I1dOr9zAC7MGDmjZEwdWRSSeCaq3siD2ZYa2M83Rt-8t6V3Ypz-eS3cx8wz_XRR9-xNVaqqHIYsKExVpzprMq7aOOuuSFhv_Do';
const TRACKS_TOKEN = 'BQBfoITHqf7TlTMZbFmJMTyXbvghyzOFipgQFHwumRcBagN0OpIw2l0K39ACKC6SkOUIRhcuYvv_W0xf0a2hV0CpHXEk-XACYj97DhzsKDpu5fk9rIYyahrydCay8UXlw8Vk77NzDU-e2InK4p6LrRPaieBP7wQLDgA';
interface ResponseType {
  artists: {
    items: [
      {
        id: string
      }
    ]
  },
  tracks: [
    {
      name: string
    }
  ]
}

interface ArtistType {
  items: [
    {
      id: string
    }
  ]
}

interface TracksType {
  tracks: [
    {
      name: string
    }
  ]
}
const Home: NextPage = ({ artists }: any) => {
  console.log(artists, 'artists')
  const [inputValue, setInputValue] = useState('');
  const [artistData, setArtistData] = useState<ArtistType>({
    items: [
      {
        id: ''
      }
    ]
  });
  const [tracks, setTracks] = useState<TracksType>({
    tracks: [
      {
        name: ''
      }
    ]
  })

  const options = {
    method: 'GET',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${ARTIST_TOKEN}`
    }
  }
  const options2 = {
    method: 'GET',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${TRACKS_TOKEN}`
    }
  }

  async function fetchData(endpoint: string, options: {}): Promise<ResponseType | undefined> {
    try {
      const res = await fetch(endpoint, options);
      const response = await res.json();
      return response;
    }
    catch (err) {
      console.log(err);
    }

  }

  async function submitSearch(inputText: string, event?: React.FormEvent<HTMLElement>): Promise<void> {
    console.log(inputText);
    event?.preventDefault();

    const artistEndpoint = `https://api.spotify.com/v1/search?q=${inputText}&type=artist&limit=1`;
    const fetchedArtist = await fetchData(artistEndpoint, options);
    fetchedArtist && setArtistData(fetchedArtist.artists);
    console.log(fetchedArtist?.artists, 'artitst')
    console.log(artistData && artistData.items[0].id, 'ID');
    const albumsEndpoint = `	https://api.spotify.com/v1/artists/${artistData && artistData.items[0].id}/top-tracks?market=ES`;

    const tracksData = await fetchData(albumsEndpoint, options2);
    console.log(tracksData, 'tracks');
    tracksData && setTracks(tracksData);
  }


  useEffect(() => {
    submitSearch(inputValue)
  }, [inputValue])


  console.log(tracks.tracks, 'allllllll')
  return (
    <AppContainer>
      <Head>
        <title>Spotify App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className="header">
        <FormComponent>
          <form id="search-form" onSubmit={(event) => submitSearch(inputValue, event)}>
            <input type="search" id="site-search" name="q"
              aria-label="Search for an artist..."
              value={inputValue}
              placeholder="Search for an artist..."
              className="input-search-form"
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setInputValue(e.target.value)}
            />
            <div className="search-button">
              <button className="btn btn-search" aria-label="Search" type="submit">
                <i className="mobile-icon-search hide-tablet"></i>
                <span className="hide-in-mobile text-link">
                  Search
                </span>
              </button>
            </div>
          </form>
        </FormComponent>
      </header>

      <main style={{ padding: '16px' }}>
        <div>
          {artistData && artistData.items.map((artist: any) =>
          (
            <div key={artist.id}>
              <p>{artist.name}</p>
              <div>
                {
                 tracks &&  tracks.tracks.map((track: any, index) => {
                    return (
                      <p key={index}>{track.name}</p>
                    )
                  })
                }
              </div>
            </div>
          )
          )}
        </div>
      </main>
    </ AppContainer>
  )
}

export default Home

export async function getStaticProps() {
  return {
    props: {
      artists: ["test2", "tets2"]
    }
  }
}
